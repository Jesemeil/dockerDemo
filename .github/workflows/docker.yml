name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        run: mvn clean package -DskipTests

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin 361769586129.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        run: docker build -t jesemeil/docker-demo .

      - name: Tag Docker image
        run: docker tag jesemeil/docker-demo:latest 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest

      - name: Push Docker image to ECR
        run: docker push 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH to EC2 and Deploy Docker Container
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ec2-54-198-37-88.compute-1.amazonaws.com
        run: |
          # Save the SSH private key to a file
          echo "$EC2_SSH_KEY" > Aghogho.pem
          chmod 600 Aghogho.pem

          # SSH into the EC2 instance and deploy the Docker container
          ssh -o StrictHostKeyChecking=no -i Aghogho.pem $EC2_USER@$EC2_HOST << 'EOF'
            aws ecr get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin 361769586129.dkr.ecr.us-east-1.amazonaws.com

            docker pull 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest

            
            docker stop docker-demo-container || true
            docker rm docker-demo-container || true

            
            docker run -d --name docker-demo-container -p 8080:8080 \
              361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest
          EOF


























#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#
#      - name: Build the application
#        run: mvn clean package -DskipTests
#
#      - name: Log in to Amazon ECR
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          aws ecr get-login-password --region us-east-1 | \
#          docker login --username AWS --password-stdin 361769586129.dkr.ecr.us-east-1.amazonaws.com
#
#      - name: Build Docker image
#        run: docker build -t jesemeil/docker-demo .
#
#      - name: Tag Docker image
#        run: docker tag jesemeil/docker-demo:latest 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest
#
#      - name: Push Docker image to ECR
#        run: docker push 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: SSH to EC2 and Deploy Docker Container
#        env:
#          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
#          EC2_USER: ubuntu  # Replace with your EC2 instance user if different
#          EC2_HOST: 54.198.37.88 # Replace with your EC2 instance's public IP
#        run: |
#          # Save the private key to a file
#          echo "$EC2_SSH_KEY" > ec2-key.pem
#          chmod 600 ec2-key.pem
#
#          # SSH into the EC2 instance and pull the latest Docker image
#          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST "
#            aws ecr get-login-password --region us-east-1 | \
#            docker login --username AWS --password-stdin 361769586129.dkr.ecr.us-east-1.amazonaws.com
#
#            docker pull 361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest
#
#            # Stop and remove any existing container
#            docker stop docker-demo-container || true
#            docker rm docker-demo-container || true
#
#            # Run the new Docker container
#            docker run -d --name docker-demo-container -p 8080:8080 \
#              361769586129.dkr.ecr.us-east-1.amazonaws.com/jesemeil/docker-demo:latest
#          "
